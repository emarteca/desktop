git/branch tip returns detached for arbitrary checkout
GitStore undo first commit reports the repository is unborn
git/merge merge and is a noop returns false
git/rebase attempt to continue without resolving conflicts REBASE_HEAD is still found
git-lfs isUsingLFS returns true if LFS is tracking a path
git/rebase abort after conflicts found returns to the feature branch
git/diff getBinaryPaths in empty repo throws since HEAD doesnt exist
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `our` version of a file and commits
BranchPruner does not prune if the last prune date is less than 24 hours ago
git/submodule listSubmodules returns the expected tag
git/reset reset can hard reset a repository
git/branch tip returns correct ref if checkout occurs
git/diff imageDiff changes for text are not set
git/submodule listSubmodules returns the submodule entry
"git/config global config getGlobalBooleanConfigValue treats ""no"" as false"
git/commit createCommit partials can commit renames with partially selected modifications
git/commit createCommit with a merge conflict creates a merge commit
git/rev-parse isGitRepository should return true for a repository
git/for-each-ref getBranches should return empty list for directory without a .git directory
git/diff getWorkingDirectoryDiff counts lines for new file
git/status getStatus with conflicted images repo parses conflicted image file on merge after removing
git/commit createCommit partials can commit single delete from modified file
"git/config global config getGlobalBooleanConfigValue treats ""false"" as false"
gitignore appendIgnoreRule appends multiple rules
git/rebase continue after resolving conflicts REBASE_HEAD is no longer found
git-lfs isUsingLFS returns false for repository not using LFS
git/rev-parse isBareRepository returns true for initialized bare repository
git/rebase detect conflicts returns a value indicating conflicts were encountered
git/diff getWorkingDirectoryDiff displays a binary diff for a docx file
git/commit createMergeCommit with a merge conflict and manual resolutions deletes files chosen to be removed and commits
git/rebase can parse progress status detects REBASE_HEAD
git/commit index corner cases file is deleted in index
git/rebase can parse progress is a detached HEAD state
git/reflog getRecentBranches returns a limited number of branches
git/merge getMergeBase returns the common ancestor of two branches
git/status getStatus with unconflicted repo parses changed files
"git/config global config getGlobalBooleanConfigValue treats ""off"" as false"
Update remote url doesn't update repository's remote url if protocols don't match
git/status getStatus with unconflicted repo reflects renames
git/reflog getRecentBranches returns the recently checked out branches
git/rebase can parse progress returns a value indicating conflicts were encountered
git/rebase abort after conflicts found REBASE_HEAD is no longer found
git/rebase attempt to continue without resolving conflicts indicates that the rebase was not complete
git/diff getWorkingDirectoryImage retrieves valid images for modified file
git/rebase detect conflicts has conflicted files in working directory
git/commit createMergeCommit with no changes throws an error
git/diff getWorkingDirectoryDiff handles unborn repository with mixed state
git/rev-parse isBareRepository throws error for missing directory
patch formatting formatPatchesForModifiedFile creates right patch when first hunk is selected
git/branch upstreamWithoutRemote returns the upstream name without the remote prefix
validatedRepositoryPath returns the path to the repository
git/log getCommits loads history
git/diff imageDiff changes for images are set
patch formatting formatPatchesForModifiedFile creates right patch when second hunk is selected
git/checkout will fail when an existing branch matches the remote branch
git/checkout can checkout a valid branch name in an existing repository
BranchPruner does nothing on non GitHub repositories
git/stash popStashEntry when there are (resolvable) conflicts restores changes and drops stash
git/commit createCommit normal can commit for empty repository
git/rebase abort after conflicts found no longer has working directory changes
git/rebase continue after resolving conflicts no longer has working directory changes
GitStore undo first commit clears the undo commit dialog
git/rev-parse getTopLevelWorkingDirectory should resolve top level directory run inside the .git folder
git/git-attributes writeGitAttributes initializes a .gitattributes file
git/rebase continue with additional changes unrelated to conflicted files has modified but unconflicted file in commit contents
git/branch deleteBranch deletes remote branches
git/rev-parse getTopLevelWorkingDirectory should return null when not run inside a working directory
git/diff getWorkingDirectoryDiff is empty for a renamed file
git/rebase can parse progress for long rebase is a detached HEAD state
git/diff getWorkingDirectoryDiff counts lines for modified file
BranchPruner does not prune reserved branches
patch formatting formatPatchesForModifiedFile rewrites hunk header when necessary
"git/config global config getGlobalBooleanConfigValue treats ""on"" as true"
git/log getCommits handles repository with HEAD file on disk
git/rebase continue with additional changes unrelated to conflicted files branch is now a different ref
git/remote findDefaultRemote returns something when origin removed
patch formatting formatPatchesForModifiedFile doesn't include unselected added lines as context
"git/config global config getGlobalBooleanConfigValue treats ""1"" as true"
git/rebase detect conflicts is a detached HEAD state
git/commit createCommit partials can commit multiple hunks from modified file
git/rebase continue after resolving conflicts branch is now a different ref
git/for-each-ref getBranches fetches branches using for-each-ref
git/branch deleteBranch deletes local branches
patch formatting formatPatchesForModifiedFile creates right patch when first and third hunk is selected
git/diff getBinaryPaths in repo with merge conflicts on image files returns all conflicted image files
git/log getCommits handles repository with signed commit and log.showSignature set
git/commit index corner cases can commit when a delete is staged and the untracked file exists
git/commit createMergeCommit with a simple merge conflict with a merge conflict creates a merge commit
git/core error handling does not throw for errors that were expected
Update remote url doesn't update the repository's remote url if it differs from the default from the github API
git/branch deleteBranch handles attempted delete of removed remote branch
git/config global config setGlobalConfigValue will replace all entries for a global value
formatPatch in a repo with 105 commits can create a series of commits from start to HEAD
git/branch getBranchesPointedAt in a local repo returns null on a malformed committish
git/stash createDesktopStashEntry stashes untracked files and removes them from the working directory
git/status getStatus with unconflicted repo returns an empty array when there are no changes
git/commit createMergeCommit with a merge conflict and manual resolutions keeps files chosen to be added and commits
Update remote url updates the repository's remote url when the github url changes
git/rebase continue after resolving conflicts returns to the feature branch
git/remote getRemotes should return both remotes
git/diff getWorkingDirectoryDiff counts lines for staged file
git/rev-parse getTopLevelWorkingDirectory should return correct path for submodules
Update remote url doesn't update the repository's remote url when the github url is the same
git/commit createMergeCommit with a merge conflict and manual resolutions binary file conflicts chooses `their` version of a file and commits
git/diff getBlobImage retrieves valid images for deleted file
"git/config global config getGlobalBooleanConfigValue treats ""yes"" as true"
git/rev-parse getTopLevelWorkingDirectory should return an absolute path when run inside a working directory
git/commit createCommit partials can commit renames with modifications
git/log getChangedFiles detects renames
git/rev-parse isBareRepository returns false for default initialized repository
git/diff getBlobImage retrieves valid image for modified file
git/reflog getBranchCheckouts returns empty when current branch is orphaned
git/reflog getBranchCheckouts returns all branches checked out after a specific date
git/stash popStashEntry without any conflicts restores changes back to the working directory
git/branch getBranchesPointedAt in a local repo finds no branch names
git/submodule resetSubmodulePaths update submodule to original commit
git/diff getBinaryPaths in repo with text only files returns an empty array
git/stash popStashEntry when there are unresolvable conflicts throws an error
git/branch getBranchesPointedAt in a local repo finds one branch name
git/rev-parse isGitRepository should return false for a directory
GitStore can discard changes from a repository
git/core config lock file error handling normalizes paths
git/diff getWorkingDirectoryDiff/unicode displays unicode characters
patch formatting formatPatchesForModifiedFile includes empty context lines
patch formatting formatPatchesForModifiedFile creates the right patch when an addition is selected but preceding deletions aren't
git/status getStatus with unconflicted repo returns null for directory without a .git directory
git/status getStatus with unconflicted repo reflects copies
git/core exit code handling does not throw for exit codes that were expected
git/rebase attempt to continue without resolving conflicts still has conflicted files in working directory
git/branch getBranchesPointedAt in a repo with identical branches finds multiple branch names
git/core config lock file error handling can parse lock file path from stderr
git/rebase continue with additional changes unrelated to conflicted files returns success
git/status getStatus with conflicted repo parses resolved files
"git/config global config getGlobalBooleanConfigValue treats ""true"" as true"
AppStore can select a repository
git/core error handling throws for errors that were not expected
git/reflog getRecentBranches works after renaming a branch
git/rev-parse isBareRepository returns false for empty directory
GitStore loadCommitBatch includes HEAD when loading commits
git/diff getWorkingDirectoryDiff/line-endings displays line endings change from LF to CRLF
git/rebase continue with tracked change omitted from list returns error code indicating that required files were missing
GitStore can discard a renamed file
git/log getChangedFiles detect copies
git/core exit code handling throws for exit codes that were not expected
git/rebase continue with additional changes unrelated to conflicted files returns to the feature branch
git/commit createCommit normal commits the given files
git/commit createCommit normal can commit renames
git/rebase can parse progress for long rebase returns a value indicating conflicts were encountered
git/status getStatus with conflicted images repo parses conflicted image file on merge
gitignore saveGitIgnore applies rule correctly to repository
GitStore undo first commit pre-fills the commit message
git/merge merge and is successful returns true
git/rebase detect conflicts status detects REBASE_HEAD
git/branch tip returns non-origin remote
git/status getStatus with conflicted repo parses conflicted files with markers
git/config config returns null for undefined values
git/reflog getBranchCheckouts returns does not return the branches that were checked out before a specific date
git/log getChangedFiles handles commit when HEAD exists on disk
git/branch tip returns current branch when on a valid HEAD
git/commit createCommit partials can commit second hunk from modified file
git/diff getBinaryPaths in repo with image changes returns all changed image files
git/status getStatus with conflicted repo parses conflicted files resulting from popping a stash
git/commit index corner cases can commit when staged new file is then deleted
git/rebase can parse progress for long rebase status detects REBASE_HEAD
git/for-each-ref getBranches should return empty list for empty repo
git/commit createCommit partials can commit some lines from new file
git/diff getWorkingDirectoryImage retrieves valid image for new file
GitStore undo first commit has no staged files
git/checkout with submodules updates a changed submodule reference
git/config global config getGlobalConfigPath gets the config path
git/checkout can checkout a branch when it exists on multiple remotes
gitignore appendIgnoreRule appends one rule
git/status getStatus with conflicted repo parses conflicted files without markers
git/branch tip returns unborn for new repository
git/commit createCommit normal commit does not strip commentary by default
git/remote findDefaultRemote returns origin when multiple remotes found
BranchPruner does not prune if there is no default branch
git/checkout with submodules cleans up an submodule that no longer exists
git/log getChangedFiles loads the files changed in the commit
git/rebase continue after resolving conflicts returns success
BranchPruner prunes for GitHub repository
git/diff getWorkingDirectoryDiff only shows modifications after move for a renamed and modified file
gitignore readGitIgnoreAtRoot reads contents from disk
"git/config global config getGlobalBooleanConfigValue treats ""0"" as false"
GitStore repository with HEAD file can discard modified change cleanly
git/commit createCommit partials can commit some lines from deleted file
patch formatting formatPatchesForModifiedFile creates the right patch when a `No newline` marker is involved
git/rebase continue with additional changes unrelated to conflicted files keeps untracked working directory file out of rebase
git/config config looks up config values
